[{"title":"Hello World","url":"/2022/04/02/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"Happy Birthday","url":"/2022/04/03/yzw/","content":"\n\n生 日 快 乐致万千世界中的你\n亲爱的，今天又长大一岁\n希望你能丛容地面对以后的生活\n我依然会为你遮风挡雨\n在这个快节奏的时代和生活中，我想和你慢下来\n一起度过每个平凡且充实的每一天\n在你疲惫的时候，你可以肆意地躺平\n在你无助的时候，你可以相信我能够依赖\n希望善良、正直、可爱的你可以一直去做自己喜欢的事情\n我会一直陪伴你去经历苦难和面对烦恼\n最后，永远年轻、永远心怀希望\nfrom 意\n","tags":["emotion"]},{"title":"cpp和golang语言层面设计的区别<0>","url":"/2022/04/05/cpp%E5%92%8Cgolang%E8%AF%AD%E8%A8%80%E5%B1%82%E9%9D%A2%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%8C%BA%E5%88%AB/","content":"cpp和golang语言层面设计的区别—概述conceptual differences\nGO 没有带有构造函数和析构函数的类，为了替代类的方法、类的多重继承、虚函数，Go提供了接口。C++中使用类似于Go的接口概念的是templates\nGo提供自动垃圾回收机制，不需要显示地释放内存空间。不需要担心堆和栈的分配非释放，比如C++中提供的new malloc  delete  delete[]  free，也不用单独地管理智能指针（std::unique_ptr, std::shared_ptr, std::weak_ptr, std::auto_ptr）以及原始指针类型。Go的run-time system可以处理好所有的程序员容易犯错的地方\nGo有指针，但是没有pointer arithmetic 。Go指针更像C++的引用。不能够使用G0指针变量遍历字符串的每个字节。Go中的Slices可以满足大部分需要指针运算的情景\nGo默认是安全的。指针不能指向任意的内存，以及缓存区益处导致程序崩溃，Go不存在这些安全问题。unsafe包可以让程序员绕过Go显式要求的保护机制\nGo中的数组是一类值。当一个数组被用作函数参数时，函数接收的是数组的拷贝值，而不是指向数组的指针。实际上，函数通常会使用slices作为参数，slices拥有指针指向数组\nStrings是由Go语言提供的值类型，一旦创建，不能被修改\nGO语言使用maps实现哈希表\nGo语言提供线程间的通信\nmaps 和 channels 是传引用，而不是传值。\nGo语言不使用头文件。Go语言的每个源文件是属于package的一部分。当包中定义的对象是以大写字母开头的，这个对象对导入它的文件是可见的\nGo不支持隐式类型转换。包含多种类型的操作需要cast（转换，在Go中叫conversion）。\nGo不支持函数重载和自定义操作符（operators）\nGo 不支持 const 或 volatile 限定符\nGo使用 nil  表示无效的指针。C++ 使用 NULL or 0 (or in C++11, nullptr)\nIdiomatic Go uses multiple return values to convey errors—one or more data results plus an error code—instead of sentinel values (e.g., -1) or structured exception handling (C++’s try…catch and throw or Go’s panic…recover).Go可以返回多个值\n\n参考资料\nhttps://github.com/golang/go/wiki/GoForCPPProgrammers\n\n","tags":["program","golang","C++"]},{"title":"golang语言学习1","url":"/2022/04/11/golang%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A01/","content":"","tags":["golang"]},{"title":"robot_arm","url":"/2022/04/09/robot-arm/","content":"","tags":["robot"]},{"title":"redis_1","url":"/2022/05/06/redis-1/","content":""}]